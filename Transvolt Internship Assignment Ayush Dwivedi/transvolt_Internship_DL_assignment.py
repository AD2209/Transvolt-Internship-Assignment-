# -*- coding: utf-8 -*-
"""Transvolt 3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1L3qoX2hX17MFXVEmS0QGCccWKln-zFxq
"""

# Step 1: Import necessary libraries
import tensorflow as tf
from tensorflow.keras.datasets import mnist
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense
from tensorflow.keras.utils import to_categorical
import matplotlib.pyplot as plt

# Step 2: Load and preprocess MNIST data
(x_train, y_train), (x_test, y_test) = mnist.load_data()

x_train = x_train.reshape((x_train.shape[0], 28, 28, 1)).astype('float32') / 255
x_test = x_test.reshape((x_test.shape[0], 28, 28, 1)).astype('float32') / 255

y_train = to_categorical(y_train)
y_test = to_categorical(y_test)

# Step 3: Define and compile the model
model = Sequential([
    Conv2D(32, kernel_size=(3,3), activation='relu', input_shape=(28,28,1)),
    MaxPooling2D(pool_size=(2,2)),
    Flatten(),
    Dense(128, activation='relu'),
    Dense(10, activation='softmax')
])

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# Step 4: Train the model
history = model.fit(x_train, y_train, epochs=5, validation_split=0.1)

# Step 5: Evaluate the model
loss, accuracy = model.evaluate(x_test, y_test)
print(f"Q1 - Test Accuracy: {accuracy:.4f}")

# Define a reusable CNN builder function
def build_cnn(filters=32, kernel_size=(3,3), activation='relu'):
    model = Sequential([
        Conv2D(filters, kernel_size=kernel_size, activation=activation, input_shape=(28,28,1)),
        MaxPooling2D(pool_size=(2,2)),
        Flatten(),
        Dense(128, activation=activation),
        Dense(10, activation='softmax')
    ])
    model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])
    return model

# Try different hyperparameter configurations
configs = [
    {"filters": 32, "kernel_size": (3, 3), "activation": "relu"},
    {"filters": 64, "kernel_size": (3, 3), "activation": "relu"},
    {"filters": 32, "kernel_size": (5, 5), "activation": "tanh"},
]

# Loop over each configuration
for i, config in enumerate(configs):
    print(f"\nQ2 - Model {i+1} - Config: {config}")
    model = build_cnn(**config)
    model.fit(x_train, y_train, epochs=3, validation_split=0.1, verbose=0)
    loss, acc = model.evaluate(x_test, y_test, verbose=0)
    print(f"Q2 - Test Accuracy (Model {i+1}): {acc:.4f}")

    print(f"\nQ3 - Model Summary for Config {i+1}:")
    model.summary()